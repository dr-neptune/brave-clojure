* Organizing Your Project: A Librarian's Tale

Within each of us lives a librarian names Melvil, a fantastical creature who delights in the organizational arts. Day and night, Melvil yearns to bring order to your codebase. Fortunately, Clojure provides a suite of tools designed specifically to aid this homonculus in its constant struggle against the forces of chaos. 

** Your Project as a Library

Clojure must maintain the assocations between our identifiers and shelf addresses. It does this by using namespaces. Namespaces contain maps between human-friendly symbols and references to shelf addresses, known as vars, much like a card catalog. 

#+BEGIN_SRC clojure
(ns-name *ns*)
#+END_SRC

#+BEGIN_SRC clojure
;; what happens when you quote a form
;; closure
inc

;; literal
'inc

;; 
(map inc [1 2])

;; expression
'(map inc [1 2])
#+END_SRC

** Storing Objects with def

#+BEGIN_SRC clojure
(def great-books ["East of Eden" "The Glass Bead Game"])

great-books
#+END_SRC

#+RESULTS:
: #'cnoob.core/great-books["East of Eden" "The Glass Bead Game"]

We can interact with a namespace's map of symbols-to-interned-vars using ns-interns.

#+BEGIN_SRC clojure
;; here is how we'd get a map of interned vars
(ns-interns *ns*)

;; we can use the get function to get a specific var
(get (ns-interns *ns*) 'great-books)
#+END_SRC

#'proj/great-books is the reader form of a var. We can use #' to grab hold of the var corresponding to the symbol that follows

#+BEGIN_SRC clojure
(deref #'great-books)
#+END_SRC

** Creating and Switching to Namespaces

Clojure allows you to create as many namespaces as you like to avoid namespace collisions. 

Clojure has 3 tools for creating namespaces:
- The function create-ns 
- The function in-ns
- The macro ns

create-ns takes a symbol, creates a namespace with that name if it doesn't exist already, and returns the namespace: 

#+BEGIN_SRC clojure
(create-ns 'cashew.taxonomy)

;; you can use the returned ns as an arg to a function call
(ns-name (create-ns 'cashew.taxonomy))
#+END_SRC

In practice, we will almost never use create-ns in code because it's not very useful to create a namespace and not move into it. 

in-ns creates a namespace if it doesn't exist and then switches to it

#+BEGIN_SRC clojure
(in-ns 'cashew.analysis)
#+END_SRC

What if we want to use functions and data from other namespaces? To do that, we can use a filly qualified symbol. The general form is namespace / name 

#+BEGIN_SRC clojure
(in-ns 'cashew.taxonomy)

(def cheddars ["mild" "medium" "strong" "sharp" "extra sharp"])

(in-ns 'cashew.analysis)

cashew.taxonomy/cheddars
#+END_SRC

** refer 

refer gives you fine-grained control over how you refer to objects in other namespaces.

#+BEGIN_SRC clojure
(in-ns 'cheese.taxonomy)

(def cheddars ["mild" "medium" "strong" "sharp" "extra sharp"])
(def bries ["Wisconsin" "Somerset" "Brie de Meaux" "Brie de Melun"])

;; create a new namespace
(in-ns 'cheese.analysis)
;; let me refer to the other namespace without using full symbols
(clojure.core/refer 'cheese.taxonomy)

;; there are also versions that allow subsets
(clojure.core/refer 'cheese.taxonomy :only ['bries])
(clojure.core/refer 'cheese.taxonomy :exclude ['bries])
(clojure.core/refer 'cheese.taxonomy :rename {'bries 'no-thanks})
#+END_SRC

From now on, when the book referenced "refer", it will have expected the function (clojure.core/refer-clojure) to have been evaluated in the repl

Sometimes you want a function to be available only to other functions within the same namespace. Clojure allows you to define private functions using defn-

#+BEGIN_SRC clojure
(clojure.core/defn- private-function
  "Just an example function that does nothing"
  [])
#+END_SRC

** alias

alias lets us shorten a namespace name for using fully qualified symbols 

#+BEGIN_SRC clojure
(clojure.core/alias 'taxon 'cheese.taxonomy)
#+END_SRC

** Real Project Organization

see the-divine-cheese-code

** The ns Macro

The tools covered so far:
- in-ns
- refer
- alias
- require
- use

are most often used when playing in the REPL. In our source code files, we'll typically use the ns macro.

You can control what gets referred from clojure-code with :refer-clojure, which takes the same options as refer:

#+BEGIN_SRC clojure
(ns the-divine-cheese-code.core
  (:refer-clojure :exclude [println]))

;; the preceding code is equivalent to
(in-ns 'the-divine-cheese-code.core)
(refer 'clojure.core :exclude ['println])

;; :require works a lot like the require function
(ns the-divine-cheese-code.core
  (:require [the-divine-cheese-code.visualization.svg :as svg]))

;; the preceding code is equivalent to
(in-ns 'the-divine-cheese-code.core)
(require '[the-divine-cheese-code.visualization.svg :as svg])

;; you can require multiple libraries in a require
(ns the-divine-cheese-code.core
  (:require [the-divine-cheese-code.visualization.svg :as svg]
            [clojure.java.browse :as browse]))

;; we can also refer names
(ns the-divine-cheese-code.core
  (:require [the-divine-cheese-code.visualization.svg :refer [points]]
            [clojure.java.browse :as browse]))

;; we can also refer all the symbols
(ns the-divine-cheese-code.core
  (:require [the-divine-cheese-code.visualization.svg :refer :all]
            [clojure.java.browse :as browse]))
#+END_SRC

The preferred way to require code is to: 
- alias namespaces
- refer symbols

