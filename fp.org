* FUNctional Programming 

** Pure Functions are Referentially Transparent 
 
#+BEGIN_SRC clojure
; pure 
(+ 1 2)

(defn wisdom
  [words]
  (str words ", Daniel-san"))

(wisdom "Always bathe on Fridays")

; not pure
(defn year-end-evaluation
  []
  (if (> (rand) 0.5)
    "You get a raise!"
    "Better luck next year!"))

(year-end-evaluation)

; file io is not pure 
(defn analyze-file
  [filename]
  (defn analysis
    [text]
    (str "Character count: " (count text)))
  (analysis (slurp filename)))
#+END_SRC

** Living with Immutable Data Structures 

#+BEGIN_SRC clojure
(defn sum
  ([vals] (sum vals 0))
  ([vals accumulating-total]
   (if (empty? vals)
     accumulating-total
     (sum (rest vals)
          (+ (first vals) accumulating-total)))))

(sum [1 2 3 4 5] 10)
#+END_SRC

This function takes 2 arguments, a collection to process (vals) and an accumulator. It uses arity overloading to provide a reasonable default for the accumulator if you do not pass one. 

#+BEGIN_SRC clojure
(defn sum
  ([vals] (sum vals 0))
  ([vals accumulating-total]
   (if (empty? vals)
     accumulating-total
     (recur (rest vals)
            (+ (first vals) accumulating-total)))))
#+END_SRC

#+BEGIN_SRC clojure
(require '[clojure.string :as s])

(defn clean
  [text]
  (s/replace (s/trim text) #"lol" "LOL"))

(clean "  My boa constrictor is so sassy lol!  ")
#+END_SRC

** Cool Things to do with Pure Functions 

*** comp 

comp allows us to compose a sequence of functions. The first function can take any number of arguments, the rest can only take one. 

#+BEGIN_SRC clojure
((comp inc *) 2 3)

(def character
  {:name "Smooches McCutes"
   :attributes {:intelligence 10
                :strength 4
                :dexterity 5}})

(def c-int (comp :intelligence :attributes))
(def c-str (comp :strength :attributes))
(def c-dex (comp :dexterity :attributes))

(c-int character)
(c-str character)
(c-dex character)
#+END_SRC

What do you do if one of the functions you want to compose needs to take more than one argument? You wrap it in a lambda. 

#+BEGIN_SRC clojure
(defn spell-slots
  [char]
  (int (inc (/ (c-int char) 2))))

(spell-slots character)

; equivalent with comp
(def spell-slots-comp (comp int inc #(/ % 2) c-int))

(spell-slots-comp character)
#+END_SRC

Clojure's comp function can compose any number of functions. Here's an implementation that composes just two function: 

#+BEGIN_SRC clojure
(defn two-comp
  [f g]
  (fn [& args]
    (f (apply g args))))

; implement in terms of two-comp
(defn n-comp
  [& fns]
  (reduce two-comp (first fns) (rest fns)))

((two-comp inc inc) 3)

((n-comp :intelligence :attributes) character)
#+END_SRC

*** memoize 

We can also memoize the results of pure functions

#+BEGIN_SRC clojure
(defn sleepy-identity
  "Returns the given value after 1 second"
  [x]
  (Thread/sleep 1000)
  x)

(sleepy-identity "Mr. Fantastico")

; create a memoized version
(def memo-sleepy-identity (memoize sleepy-identity))

(memo-sleepy-identity "Mr. Fantastico")
#+END_SRC

** Peg Thing 

*** Code Organization 

The program has to handle four major tasks: 

1. Create a new board
2. Return a board with the result of the players move
3. Represent a board textually
4. Handle user interaction 

The architecture has two layers: the top layer consists of the functions for handling user interaction. They control all the program's side effects: printing out the board and presenting prompts for player interaction. The bottom layer consists of functions used by the top layer to create a new board, make moves, and create a textual representation. 

#+BEGIN_SRC clojure
(declare successful-move prompt-move game-over query-rows)
#+END_SRC

*** Creating the Board 

The data structure representing the board should make it easy to print the board, check whether a player has made a valid move, perform a move, and check whether the game is over. 

We will be using a map with numerical keys corresponding to each board position and values containing information about that position's connections. It also contains a :rows key, storing the total number of rows. 

#+BEGIN_SRC clojure
{1  {:pegged true, :connections {6 3, 4 2}},
 2  {:pegged true, :connections {9 5, 7 4}},
 3  {:pegged true, :connections {10 6, 8 5}},
 4  {:pegged true, :connections {13 8, 11 7, 6 5, 1 2}},
 5  {:pegged true, :connections {14 9, 12 8}},
 6  {:pegged true, :connections {15 10, 13 9, 4 5, 1 3}},
 7  {:pegged true, :connections {9 8, 2 4}},
 8  {:pegged true, :connections {10 9, 3 5}},
 9  {:pegged true, :connections {7 8, 2 5}},
 10 {:pegged true, :connections {8 9, 3 6}},
 11 {:pegged true, :connections {13 12, 4 7}},
 12 {:pegged true, :connections {14 13, 5 8}},
 13 {:pegged true, :connections {15 14, 11 12, 6 9, 4 8}},
 14 {:pegged true, :connections {12 13, 5 9}},
 15 {:pegged true, :connections {13 14, 6 10}},
 :rows 5}
#+END_SRC

#+BEGIN_SRC clojure
{:pegged true, :connections {6 3, 4 2}}
#+END_SRC

:pegged is whether a position has a peg in it. :connections is a map where each key identifies a legal destination, and each value represents the position that would be jumped over. 

Triangular numbers are generated by adding the first n natural numbers. These numbers line up very nicely with the position numbers at the end of every row on the board. 

#+BEGIN_SRC clojure
(defn tri*
  "Generates lazy sequences of triangular numbers"
  ([] (tri* 0 1))
  ([sum n]
   (let [new-sum (+ sum n)]
     (cons new-sum (lazy-seq (tri* new-sum (inc n)))))))

(def tri (tri*))

(take 10 tri)

; is the arg in the tri lazy sequence?
(defn triangular?
  "Is the number triangular? e.g. 1 3 6 10 15 etc"
  [n]
  (= n (last (take-while #(>= n %) tri))))

(triangular? 1000000000)
(triangular? 6)

; take a row number and give the triangular number at the end of the row 
(defn row-tri
  "The triangular number at the end of row n"
  [n]
  (last (take n tri)))

(row-tri 5)

; take a board position and return the row that it belongs to 
(defn row-num
  "Returns row number the position belongs to: pos 1 in row 1, pos 2 and 3 in row 2, etc"
  [pos]
  (inc (count (take-while #(> pos %) tri))))

(row-num 14)

; form a connection between two positions 
(defn connect
  "Form a mutual connection between two positions"
  [board max-pos pos neighbor destination]
  ; confirm dest is a position
  (if (<= destination max-pos)
    ; build up final state of board
    (reduce (fn [new-board [p1 p2]]
              (assoc-in new-board [p1 :connections p2] neighbor))
            board
            [[pos destination] [destination pos]])
    board))

; assoc-in lets you return a new map with the given value at the specified nesting 
(assoc-in {} [:cookie :monster :vocal] "Fintroll")
(get-in {:cookie {:monster {:vocals "Finntroll"}}} [:cookie :monster])
(assoc-in {} [1 :connections 4] 2)

; how should the program choose two positions to connect?
(defn connect-right
  [board max-pos pos]
  (let [neighbor (inc pos)
        destination (inc neighbor)]
    (if-not (or (triangular? neighbor)
                (triangular? pos))
      (connect board max-pos pos neighbor destination)
      board)))

(defn connect-down-left
  [board max-pos pos]
  (let [row (row-num pos)
        neighbor (+ row pos)
        destination (+ 1 row neighbor)]
    (connect board max-pos pos neighbor destination)))

(defn connect-down-right
  [board max-pos pos]
  (let [row (row-num pos)
        neighbor (+ 1 row pos)
        destination (+ 2 row neighbor)]
    (connect board max-pos pos neighbor destination))) 

; examples
(connect-down-left {} 15 1)
(connect-down-right {} 15 3)
#+END_SRC

Not feeling peg-thing 

Let's skip to the exercises: 

*** Exercises 

1. Create a new function, attr, that you can call like (attr :intelligence) that does the same thing 

#+BEGIN_SRC clojure
(defn attr
  [ibute]
  (two-comp ibute :attributes))

((attr :intelligence) character)
((attr :strength) character)
((attr :dexterity) character)
#+END_SRC

2. Implement the comp function 

#+BEGIN_SRC clojure
(defn n-comp
  [& funcs]
  (reduce two-comp (first funcs) (rest funcs)))

((n-comp :intelligence :attributes) character)
#+END_SRC

3. Implement the assoc-in function. Hint: use the assoc function and define its parameters as [m [k & ks] v]

#+BEGIN_SRC clojure
; reference
(assoc-in {} [:cookie :monster :vocal] "Fintroll")
(assoc {} :cookie "monster")

(defn my-assoc-in
  [m [k & ks] v]
  (if (empty? ks)
    (assoc m k v)
    (assoc m k (my-assoc-in m ks v))))

(my-assoc-in {} [:cookie :monster :vocal] "Fintroll")
#+END_SRC

4. Look up and use the update-in function 

(update-in m ks f & args)

"updates" a value in a nested associative structure, where ks is a sequence of keys and f is a function that will take the old value and any supplied args and return the new value, and returns a new nested structure. If any levels do not exist, hash-maps will be created. 

#+BEGIN_SRC clojure
(def users [{:name "Michael" :age 28}
            {:name "Kelsey" :age 24}])

(update-in users [1 :age] inc)

(map (fn [x] (update-in x [:name] #(if (= "Michael" %) % "KeLsEy"))) users)
#+END_SRC

5. Implement update-in 

#+BEGIN_SRC clojure
(defn my-update-in
  [m ks f & args]
  (assoc-in m ks (f (get-in m ks))))

(update-in users [0 :age] inc)
(my-update-in users [0 :age] inc)
(map (fn [x] (my-update-in x [:name] #(if (= "Michael" %) % "KeLsEy"))) users)
#+END_SRC
