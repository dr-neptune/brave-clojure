* Clojure Metaphysics: Atoms, Refs, Vars, and Cuddle Zombies

  In this chapter, we learn about why clojure is safe for concurrent applications. We will also learn about the atom, ref, and var reference types.

** Clojure Metaphysics

 In Clojure, we view objects as a succession of values since the underlying data structures are immutable.

** Atoms

Clojure's atom reference type allows you to endow a succession of related values with an identity.

#+BEGIN_SRC clojure
(def fred (atom {:cuddle-hunger-level 0
                 :percent-deteriorated 0}))

;; to get an atom's current state, you dereference it.
@fred

;; log an objects state with println
(let [zombie-state @fred]
  (if (>= (:percent-deteriorated zombie-state) 50)
    (future (println (:cuddle-hunger-level zombie-state)))))
#+END_SRC

To update the atom so that it refers to a new state, you use `swap!`. Now we are working with the atom reference type, a construct that refers to atomic values.

swap! recieves an atom and a function as arguments. It applies the function to the atom's current state to produce a new value, and then it updates the atom to refer to this new value.

#+BEGIN_SRC clojure
;; increase Fred's cuddle hunger by one
(swap! fred
       (fn [current-state]
         (merge-with + current-state {:cuddle-hunger-level 1})))

;; we can update the hunger level and deterioration percentage at the same time since its impossible for fred to be in an inconsistent state
(swap! fred
       (fn [current-state]
         (merge-with + current-state {:cuddle-hunger-level 1
                                      :percent-deteriorated 1})))

;; pass swap multiple arguments
(defn increase-cuddle-hunger-level
  [zombie-state increase-by]
  (merge-with + zombie-state {:cuddle-hunger-level increase-by}))

;; this does affect not Fred's state
(increase-cuddle-hunger-level @fred 10)

;; this does affect Fred's state
(swap! fred increase-cuddle-hunger-level 10)

;; using built in clojure functions
;; takes a collection, a vector for id'ing which value to update and a fn to update that value
(update-in {:a {:b 3}}
           [:a :b]
           inc)

(update-in {:c {:b 3 :a 2}}
           [:c :a]
           + 10)

;; use update-in to change Fred's state
(swap! fred update-in [:cuddle-hunger-level] + 10)

;; by using atoms, you can retain past state.
(let [num (atom 1)
      s1 @num]
  (swap! num inc)
  (println "State 1:" s1)
  (println "Current state:" @num))

;; say we wish to update an atom without checking its current value
(reset! fred {:cuddle-hunger-level 0
              :percent-deteriorated 0})
#+END_SRC

To recap: atoms implement Clojure's concept of state. They allow you to endow a sequence of immutable values with an identity. They offer a solution to the reference cell and mutual exclusion problems through their compare-and-set semantics. They also allow you to work with past states without fear of mutating them in place.

** Watches

A watch is a function that takes four arguments: a key, the reference being watched, its previous state, and its new state

#+BEGIN_SRC clojure
(defn shuffle-speed
  [zombie]
  (* (:cuddle-hunger-level zombie)
     (- 100 (:percent-deteriorated zombie))))

(shuffle-speed @fred)

;; watch fn to determine if fred is moving at 5000 SPH
(defn shuffle-alert
  [key watched old-state new-state]
  (let [sph (shuffle-speed new-state)]
    (if (> sph 5000)
      (do
        (println "Run, you fool!")
        (println "The zombie's SPH is now " sph)
        (println "This message brought to you courtesy of " key))
      (do
        (println "All's well with " key)
        (println "Cuddle hunger: " (:cuddle-hunger-level new-state))
        (println "Percent deteriorated: " (:percent-deteriorated new-state))
        (println "SPH: " sph)))))

;; attach our watch to fred
(reset! fred {:cuddle-hunger-level 22
              :percent-deteriorated 2})

(add-watch fred :fred-shuffle-alert shuffle-alert)

;; see how watch reacts
(swap! fred update-in [:percent-deteriorated] + 1)

(swap! fred update-in [:cuddle-hunger-level] + 30)
#+END_SRC

** Validators

Validators let you specify what states are allowable for a reference.

#+BEGIN_SRC clojure
;; ensure percent-deteriorated in [0, 100]
(defn percent-deteriorated-validator
  [{:keys [percent-deteriorated]}]
  (or (and (>= percent-deteriorated 0)
           (<= percent-deteriorated 100))
      (throw (IllegalStateException. "That's not mathy!"))))

;; attach a validator during atom creation
(def bobby
  (atom
   {:cuddle-hunger-level 0
    :percent-deteriorated 0}
   :validator percent-deteriorated-validator))

(swap! bobby update-in [:percent-deteriorated] + 200)
#+END_SRC

** Modeling Sock Transfers

You can model this sock transfer with refs. Refs allow you to update the state of multiple identities using transaction semantics. These transactions have 3 features:

- they are atomic, meaning that all refs are updated or none of them are
- they are consistent, meaning that the refs always appear to have valid states.
- they are isolated, meaning that transactions behave as if they executed serially.

You can think of refs as giving the same concurrency safety as database transactions, only with in-memory data

#+BEGIN_SRC clojure
;; sock types
(def sock-varieties
  #{"darned" "argyle" "wool" "horsehair" "mulleted"
    "passive-aggressive" "striped" "polka-dotted"
    "athletic" "business" "power" "invisible" "gollumed"})

(defn sock-count
  [sock-variety count]
  {:variety sock-variety
   :count count})

(defn generate-sock-gnome
  "Create an initial sock gnome state with no socks"
  [name]
  {:name name
   :socks #{}})

;; create some refs
(def sock-gnome (ref (generate-sock-gnome "Barumpharumph")))
(def dryer (ref {:name "LG 1337"
                 :socks (set (map #(sock-count % 2) sock-varieties))}))

;; you can dereference regs just like you can dereference atoms
(:socks @dryer)

;; make the gnome steal a random sock from the dryer
(defn steal-sock
  [gnome dryer]
  (dosync
   (when-let [pair (some #(if (= (:count %) 2) %) (:socks @dryer))]
     (let [updated-count (sock-count (:variety pair) 1)]
       (alter gnome update-in [:socks] conj updated-count)
       (alter dryer update-in [:socks] disj pair)
       (alter dryer update-in [:socks] conj updated-count)))))

(steal-sock sock-gnome dryer)

(:socks @sock-gnome)

;; check that all socks are accounted for
(defn similar-socks
  [target-sock sock-set]
  (filter #(= (:variety %)
              (:variety target-sock))
          sock-set))

(similar-socks (first (:socks @sock-gnome))
               (:socks @dryer))
#+END_SRC

When you alter a ref, the change isn't immediately visible outside of the current transaction. This is what lets you call alter on the dryer twice within a transaction without worrying about whether dryer will be read in an inconsistent state. Similarly, if you alter a ref and then deref it within the same transaction, the deref will return the new state.

#+BEGIN_SRC clojure
;; example of the idea of in-transaction state
(def counter (ref 0))

(future
  (dosync
   (alter counter inc)
   (println @counter)
   (Thread/sleep 500)
   (alter counter inc)
   (println @counter)))
(Thread/sleep 250)
(println @counter)
#+END_SRC

** commute

commute allows you to update a ref's state within a transaction, just like alter.

alter behaves like:

1. reach outside the transaction and read the ref's current state
2. compare the current state to the state the ref started with within the transaction
3. if the two differ, make the transaction retry
4. otherwise, commit the altered ref state

commute behaves like:

1. reach outside the transaction and read the ref's current state
2. run the commute function against the current state
3. commit the result

commute doesn't every force a transaction retry. This can improve performance, but it's important that you only use commute when you're sure that its not possible for your refs to end up in an invalid state.

#+BEGIN_SRC clojure
;; example of safe use of commute
(defn sleep-print-update
  [sleep-time thread-name update-fn]
  (fn [state]
    (Thread/sleep sleep-time)
    (println (str thread-name ":" state))
    (update-fn state)))

(def counter (ref 0))

(future (dosync (commute counter (sleep-print-update 1000 "Thread A" inc))))
(future (dosync (commute counter (sleep-print-update 1500 "Thread B" inc))))

;; unsafe commuting
(def receiver-a (ref #{}))
(def receiver-b (ref #{}))
(def giver (ref #{1}))

(do (future (dosync (let [gift (first @giver)]
                      (Thread/sleep 10)
                      (commute receiver-a conj gift)
                      (commute giver disj gift))))
    (future (dosync (let [gift (first @giver)]
                      (Thread/sleep 50)
                      (commute receiver-b conj gift)
                      (commute giver disj gift)))))

@receiver-a
@receiver-b
@giver
#+END_SRC

** Vars

Vars are associated between symbols and objects. Although vars aren't used to manage state in the same way as atoms and refs, they do have a couple concurrency tricks: you can dynamically bind them, and you can alter their roots.

** Dynamic Binding

You usually treat defs as constants, but we can create a dynamic var whose binding can be changed

#+BEGIN_SRC clojure
;; create a dynamic var
(def ^:dynamic *notification-address* "dobby@elf.org")

;; unlike regular vars, you can temporarily change the value of the dynamic vars by using binding
(binding [*notification-address* "test@elf.org"]
  *notification-address*)

;; you can also stack bindings like with let
(binding [*notification-address* "tester-1@elf.org"]
  (println *notification-address*)
  (binding [*notification-address* "tester-2@elf.org"]
    (println *notification-address*))
  (println *notification-address*))
#+END_SRC

** Dynamic Var Uses

#+BEGIN_SRC clojure
(defn notify
  [message]
  (str "TO: " *notification-address* "\n"
       "MESSAGE: " message))
(notify "Hi Dobby")

;; what if you want to test this function without spamming Dobby?
(binding [*notification-address* "test@elf.org"]
  (notify "Test!"))
#+END_SRC

Dynamic vars are most often used to name a resource that one or more functions target. Clojure comes with a ton of built-in dynamic vars for this purpose. *out*, for example, represents the std out for print operations.

We could re-bind *out* so that it prints statements to a file

#+BEGIN_SRC clojure
(binding [*out* (clojure.java.io/writer "print-output")]
  (println "A man who carries a cat by the tail learns something he can learn in no other way. -- Mark Twain"))

(slurp "print-output")

;; or change configuration variables
(println ["Print" "all" "the" "things"])
(binding [*print-length* 1]
  (println ["Print" "just" "one!"]))
#+END_SRC

Dynamic vars are a great way to specify a common resource while retaining the flexibility to change it on an ad hoc basis.

Finally, its possible to set! dynamic vars that have been bound. Whereas our examples have allowed us to convey information in to a function without having to pass in the info as an argument, set! allows us to convey information out of a function without having to return it as an argument.

#+BEGIN_SRC clojure
(def ^:dynamic *troll-thought* nil)

(defn troll-riddle
  [your-answer]
  (let [number "man meat"]
    (when (thread-bound? #'*troll-thought*) ;; see if the var has been bound
      (set! *troll-thought* number)) ;; if so, set! *troll-thought* to the trolls thought
    (if (= number your-answer)
      "TROLL: You can cross the bridge!"
      "TROLL: Time to eat you, succulent human!")))

(binding [*troll-thought* nil]
  (println (troll-riddle 2))
  (println "SUCCULENT HUMAN: Oooooh! The answer was" *troll-thought*))
#+END_SRC

** per-thread binding

If you access a dynamically bound var from within a manually crafted thread, the var will evaluate to the original value.

** Altering the Var Root

#+BEGIN_SRC clojure
;; when you create a new var, the initial values supplied is its root
(def power-source "hair")

;; change the root value
(alter-var-root #'power-source (fn [_] "7-eleven parking lot"))

;; temporarily alter root
(with-redefs [*out* *out*]
  (doto (Thread. #(println "with redefs allows me to show up in the REPL"))
    .start
    .join))
#+END_SRC

with-reders can be used with any var, not just dynamic ones. Since it has such far reaching effects, you should only use it during testing. For example, you can use it to redefine a function that returns data from a network call, so that the function returns mock data without having to actually make a network request.

** Stateless Concurrency and Parallelism with pmap

Clojure makes it easy to achieve stateless concurrency with pmap.

Now we will compare map with pmap

#+BEGIN_SRC clojure
;; generate example data
(defn always-1
  []
  1)

;; create a lazy seq of random numbers between 0 and 9
(take 5 (repeatedly (partial rand-int 10)))

;; generate data that consists of 3000 random strings, each 7000 characters long
(def alphabet-length 26)

;; vector of characters A-Z
(def letters (mapv (comp str char (partial + 65)) (range alphabet-length)))

(defn random-string
  "Returns a random string of specified length"
  [length]
  (apply str (take length (repeatedly #(rand-nth letters)))))

(defn random-string-list
  [list-length string-length]
  (doall (take list-length (repeatedly (partial random-string string-length)))))

(def orc-names (random-string-list 3000 7000))
#+END_SRC

Since map and pmap are lazy, we have to force them to be realized. The dorun function realizes the sequence but returns nil

#+BEGIN_SRC clojure
(time (dorun (map clojure.string/lower-case orc-names)))
(time (dorun (pmap clojure.string/lower-case orc-names)))
#+END_SRC

#+BEGIN_SRC clojure
;; show case where pmap might take longer due to overhead
(def orc-name-abbrevs (random-string-list 20000 300))

(time (dorun (map clojure.string/lower-case orc-name-abbrevs)))
(time (dorun (pmap clojure.string/lower-case orc-name-abbrevs)))
#+END_SRC

The solution to this problem is to increase the grain size, or the amount of work done by each parallelized task. To accomplish this, we can make our function apply to multiple elements instead of just one using partition-all

#+BEGIN_SRC clojure
(def numbers [1 2 3 4 5 6 7 8 9 10])

(partition-all 3 numbers)

;; grain size 1
(pmap inc numbers)

;; grain size 3
(apply concat
       (pmap (fn [number-group]
               (doall (map inc number-group)))
             (partition-all 3 numbers)))
#+END_SRC

We've increase the grain size to 3 because each thread now executes three applications of the inc function instead of 1. The call to doall within the mapping function forces the lazy sequence returns by (map inc number-group) to be realized within the thread. Then, we ungroup the partitions by applying concat.

#+BEGIN_SRC clojure
;; make each thread run on 1000 orc names instead of just one
(time
 (dorun
  (apply concat
         (pmap (fn [name] (doall (map clojure.string/lower-case name)))
               (partition-all 1000 orc-name-abbrevs)))))
#+END_SRC

We can generalize this technique into a function called ppmap for partition parallel map

#+BEGIN_SRC clojure
(defn ppmap
  "Partitioned pmap, for grouping map ops together to make parallel overhead worthwhile"
  [grain-size f & colls]
  (apply concat
         (apply pmap
                (fn [& pgroups] (doall (apply map f pgroups)))
                (map (partial partition-all grain-size) colls))))

(time (dorun (ppmap 1000 clojure.string/lower-case orc-name-abbrevs)))
#+END_SRC

** Exercises

1. Create an atom with the initial value 0, use swap! to increment it a couple times, then dereference it

#+BEGIN_SRC clojure
(def init (atom 0))

(swap! init inc)

@init
#+END_SRC
